{"version":3,"sources":["encryption.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import * as openpgp from 'openpgp'\n\nexport async function decrypt ({ message, passphrase, keyPair }) {\n  const privKeyObj = (await openpgp.key.readArmored(keyPair.privateKey)).keys[0]\n  await privKeyObj.decrypt(passphrase)\n\n  const options = {\n    message: await openpgp.message.readArmored(message),\n    // publicKeys: (await openpgp.key.readArmored(pubkey)).keys, // for verification (optional)\n    privateKeys: [privKeyObj]\n  }\n\n  const plaintext = await openpgp.decrypt(options)\n  return plaintext\n}\n\n\nexport async function encrypt ({ message, passphrase, keyPair }) {\n  const privKeyObj = (await openpgp.key.readArmored(keyPair.privateKey)).keys[0]\n  await privKeyObj.decrypt(passphrase)\n\n  const options = {\n    message: openpgp.message.fromText(message),\n    armored: false,\n    publicKeys: (await openpgp.key.readArmored(keyPair.publicKey)).keys, // for verification (optional)\n    privateKeys: [privKeyObj]\n  }\n\n  const cyphertext = await openpgp.encrypt(options)\n  return cyphertext\n}\n\n\nexport async function generateKeyPair(options) {\n  const { key, ...rest } = await openpgp.generateKey(options)\n  return rest\n}","import { app, BrowserWindow, ipcMain } from 'electron'\nimport path from 'path'\nimport { decrypt, encrypt, generateKeyPair } from './encryption'\n\n// Handle creating/removing shortcuts on Windows when installing/uninstalling.\nif (require('electron-squirrel-startup')) {\n  // eslint-disable-line global-require\n  app.quit()\n}\n\nconst createWindow = () => {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    titleBarStyle: 'hidden',\n    webPreferences: {\n      preload: __dirname + '/preload.js'\n    }\n  })\n\n  // and load the index.html of the app.\n  mainWindow.loadFile(path.join(__dirname, 'index.html'))\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Open the DevTools.\n    mainWindow.webContents.openDevTools()\n  }\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', createWindow)\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})\n\nconst DECRYPT = 'DECRYPT'\nconst ENCRYPT = 'ENCRYPT'\nconst GENERATE_KEY_PAIR = 'GENERATE_KEY_PAIR'\n\nipcMain.on('put', async (event, args) => {\n  let data\n  const payload = JSON.parse(args)\n  switch (payload.action) {\n    case DECRYPT:\n      data = await decrypt(payload.data)\n      break\n    case ENCRYPT:\n      data = await encrypt(payload.data)\n      break\n    case GENERATE_KEY_PAIR:\n      data = await generateKeyPair(payload.data)\n  }\n  event.sender.send('data', JSON.stringify(data))\n})\n\n"]}